{"version":3,"sources":["components/editor/Editor.module.scss","components/catalog-item/CatalogItem.module.scss","components/catalog/Catalog.module.scss","components/layers/Layers.module.scss","components/sidebar/Sidebar.module.scss","components/canvas/Canvas.module.scss","components/placeholder/Placeholder.module.scss","components/sandbox/Sandbox.module.scss","components/editor/Editor.jsx","components/catalog-item/CatalogItem.jsx","components/catalog/Catalog.jsx","components/tree/Tree.jsx","components/layers/Layers.jsx","components/sidebar/Sidebar.jsx","react-fiber/react-fiber.js","context/DispatchContext.js","generators/workspace/workspace-generator.jsx","components/canvas/Canvas.jsx","plugins/imports.js","components/placeholder/Placeholder.jsx","reducer/initial-state/initialState.js","tree-parser/tree-parser.js","generators/example/example-generator.js","reducer/replace/replace.js","reducer/select/select.js","reducer/reducer.js","components/sandbox/Sandbox.jsx","index.jsx"],"names":["module","exports","cx","classNames","bind","styles","Editor","props","selected","className","CatalogItem","identifier","name","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","Catalog","useState","searchValue","setSearchValue","components","Object","keys","plugins","map","key","exportType","toLowerCase","indexOf","onChange","target","value","placeholder","type","Tree","root","workspace","data-terra-sandbox-root","createTree","node","depth","id","properties","nodes","style","paddingLeft","split","pop","forEach","property","propertyValue","push","Layers","Sidebar","sidebar","useRef","bottomSection","handleMouseMoveHorizontal","clientX","current","width","handleMouseMoveVertical","height","window","innerHeight","clientY","handleMouseUp","document","body","classList","remove","documentElement","cursor","removeEventListener","ref","onMouseDown","button","addEventListener","role","Fiber","dataset","terraSandboxRoot","fiberNode","match","return","length","find","startsWith","DispatchContext","React","createContext","WorkspaceGenerator","imports","config","component","importFrom","default","Component","import","undefined","Canvas","dispatch","useContext","selectNearestTarget","findNearest","useEffect","generate","Placeholder","expand","dropped","setDropped","onDragOver","preventDefault","onDragEnter","onDrop","sandboxData","getData","parse","then","dynamicImport","replacement","catch","error","console","log","initialUUID","uuidv4","initialState","parent","TreeParser","tree","replaceTarget","replaceElement","replaceNode","prop","ExampleGenerator","configuration","example","replace","state","action","select","reducer","Sandbox","useReducer","locale","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1276c85c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"Editor_editor__2ZK6b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"catalog-item\":\"CatalogItem_catalog-item__1yJ-b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"catalog\":\"Catalog_catalog__gB0WM\",\"input\":\"Catalog_input__1Hzgz\",\"components\":\"Catalog_components__xPgEm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layers\":\"Layers_layers__rrXTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__ybD5g\",\"content\":\"Sidebar_content__3RRDH\",\"top-section\":\"Sidebar_top-section__1lbbA\",\"header\":\"Sidebar_header__1gSWA\",\"bottom-section\":\"Sidebar_bottom-section__2Htyu\",\"horizontal-resizer\":\"Sidebar_horizontal-resizer__2bi31\",\"vertical-resizer\":\"Sidebar_vertical-resizer__3RH35\",\"inactive\":\"Sidebar_inactive__1W0Lr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Canvas_canvas__XH7zY\",\"body\":\"Canvas_body__3F2s9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"placeholder\":\"Placeholder_placeholder__3FXn4\",\"expand\":\"Placeholder_expand__1Py8x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sandbox\":\"Sandbox_sandbox__oA_MS\",\"header\":\"Sandbox_header__3YzRS\",\"layout\":\"Sandbox_layout__625qo\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport styles from './Editor.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The identifier of the selected component.\n   */\n  selected: PropTypes.string,\n};\n\nconst Editor = (props) => {\n  const { selected } = props;\n\n  return (\n    <div className={cx('editor')}>\n      Editor Selected:\n      {' '}\n      {selected}\n    </div>\n  );\n};\n\nEditor.propTypes = propTypes;\n\nexport default Editor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport styles from './CatalogItem.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The identifier of the component.\n   */\n  identifier: PropTypes.string,\n  /**\n   * The name of the component.\n   */\n  name: PropTypes.string,\n};\n\nconst CatalogItem = (props) => {\n  const { identifier, name } = props;\n\n  /**\n   * Handles the drag start event. Transfers component information.\n   * @param {Event} event - The drag start event.\n   */\n  const handleDragStart = (event) => {\n    event.dataTransfer.setData('terra-sandbox-data', JSON.stringify({ identifier }));\n  };\n\n  return (\n    <div className={cx('catalog-item')} draggable onDragStart={handleDragStart}>\n      {name}\n    </div>\n  );\n};\n\nCatalogItem.propTypes = propTypes;\n\nexport default CatalogItem;\n","import React, { useState } from 'react';\nimport classNames from 'classnames/bind';\nimport CatalogItem from '../catalog-item/CatalogItem';\nimport styles from './Catalog.module.scss';\nimport plugins from '../../plugins/plugins.json';\n\nconst cx = classNames.bind(styles);\n\nconst Catalog = () => {\n  const [searchValue, setSearchValue] = useState('');\n\n  /**\n   * Handles updates to the input change events.\n   * @param {Event} event - The input on change event;\n   */\n  const handleChange = (event) => {\n    setSearchValue(event.target.value.toLowerCase());\n  };\n\n  /**\n   * The filtered component list to populate the catalog.\n   */\n  const components = Object.keys(plugins).map((key) => {\n    const { name, exportType } = plugins[key];\n\n    // Subcomponents are excluded.\n    if (exportType === 'Default' && name.toLowerCase().indexOf(searchValue) > -1) {\n      return <CatalogItem key={key} identifier={key} name={name} />;\n    }\n\n    return undefined;\n  });\n\n  return (\n    <div className={cx('catalog')}>\n      <input\n        className={cx('input')}\n        onChange={handleChange}\n        placeholder=\"Search Components\"\n        type=\"Search\"\n        value={searchValue}\n      />\n      <div className={cx('components')}>\n        {components}\n      </div>\n    </div>\n  );\n};\n\nexport default Catalog;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  /**\n   * The in-progress workspace design.\n   */\n  workspace: PropTypes.object.isRequired,\n};\n\nconst Tree = (props) => {\n  const { workspace } = props;\n  const { root } = workspace;\n\n  const createTree = (node, depth = 0) => {\n    const { id, value } = node;\n    const { props: properties, name } = value;\n\n    // eslint-disable-next-line react/forbid-dom-props\n    const nodes = [<div key={id} style={{ paddingLeft: `${depth * 15}px` }}>{name.split(':').pop()}</div>];\n\n    Object.keys(properties).forEach((property) => {\n      const { type, value: propertyValue } = properties[property];\n\n      if (type === 'node') {\n        nodes.push(Object.keys(propertyValue).map((key) => createTree(propertyValue[key], depth + 1)));\n      }\n\n      if (type === 'element') {\n        nodes.push(createTree(properties[property], depth + 1));\n      }\n    });\n\n    return nodes;\n  };\n\n  return (\n    <>\n      <div data-terra-sandbox-root>Workspace</div>\n      {Object.keys(root).map((key) => createTree(root[key], 1))}\n    </>\n  );\n};\n\nTree.propTypes = propTypes;\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Tree from '../tree/Tree';\nimport styles from './Layers.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The identifier of the selected component.\n   */\n  selected: PropTypes.string,\n  /**\n   * The in-progress workspace design.\n   */\n  workspace: PropTypes.object.isRequired,\n};\n\nconst Layers = (props) => {\n  const { selected, workspace } = props;\n\n  return (\n    <div className={cx('layers')}>\n      <Tree workspace={workspace} selected={selected} />\n    </div>\n  );\n};\n\nLayers.propTypes = propTypes;\n\nexport default Layers;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Catalog from '../catalog/Catalog';\nimport Layers from '../layers/Layers';\nimport styles from './Sidebar.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The identifier of the selected component.\n   */\n  selected: PropTypes.string,\n  /**\n   * The in-progress workspace design.\n   */\n  workspace: PropTypes.object.isRequired,\n};\n\nconst Sidebar = (props) => {\n  const { selected, workspace } = props;\n\n  const sidebar = useRef();\n  const bottomSection = useRef();\n\n  /**\n   * Modifies the sidebar width as the mouse moves horizontally.\n   * @param {event} event - The mouse move event.\n   */\n  const handleMouseMoveHorizontal = (event) => {\n    const { clientX } = event;\n\n    sidebar.current.style.width = `${clientX}px`;\n  };\n\n  /**\n   * Modifies the layers height as the mouse moves vertically.\n   * @param {event} event - The mouse move event.\n   */\n  const handleMouseMoveVertical = (event) => {\n    bottomSection.current.style.height = `${window.innerHeight - event.clientY}px`;\n  };\n\n  /**\n   * Restores the window state on mouse up.\n   */\n  const handleMouseUp = () => {\n    // Re-enable user selection and pointer events.\n    document.body.classList.remove(cx('inactive'));\n    document.documentElement.style.cursor = '';\n\n    window.removeEventListener('mousemove', handleMouseMoveHorizontal);\n    window.removeEventListener('mousemove', handleMouseMoveVertical);\n    window.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  /**\n   * Initializes listeners for resizing the sidebar.\n   * @param {event} event - The mouse down event.\n   */\n  const handleMouseDownHorizontal = (event) => {\n    // Only accept left mouse clicks.\n    if (event.button > 1) {\n      return;\n    }\n\n    // Persists the horizontal resize cursor for the duration of the action.\n    // Without this the cursor will default back to a pointer during a resize action.\n    document.documentElement.style.cursor = 'ew-resize';\n\n    // Disable user selection and pointer events to prevent interference during resizing.\n    document.body.className += cx('inactive');\n\n    window.addEventListener('mousemove', handleMouseMoveHorizontal);\n    window.addEventListener('mouseup', handleMouseUp);\n  };\n\n  /**\n   * Initializes listeners for resizing the bottom section vertically.\n   * @param {event} event - The mouse down event.\n   */\n  const handleMouseDownVertical = (event) => {\n    // Only accept left mouse clicks.\n    if (event.button > 1) {\n      return;\n    }\n\n    document.documentElement.style.cursor = 'ns-resize';\n\n    // Disable user selection and pointer events to prevent interference during resizing.\n    document.body.className += cx('inactive');\n\n    window.addEventListener('mousemove', handleMouseMoveVertical);\n    window.addEventListener('mouseup', handleMouseUp);\n  };\n\n  return (\n    // eslint-disable-next-line react/forbid-dom-props\n    <div className={cx('sidebar')} ref={sidebar}>\n      <div className={cx('content')}>\n        <div className={cx('top-section')}>\n          <div className={cx('header')}>\n            Component\n          </div>\n          <Catalog />\n        </div>\n        <div className={(cx('bottom-section'))} ref={bottomSection}>\n          <div className={cx('header')}>\n            <div className={cx('vertical-resizer')} onMouseDown={handleMouseDownVertical} role=\"presentation\" />\n            Layers\n          </div>\n          <Layers selected={selected} workspace={workspace} />\n        </div>\n      </div>\n      <div className={cx('horizontal-resizer')} onMouseDown={handleMouseDownHorizontal} role=\"presentation\" />\n    </div>\n  );\n};\n\nSidebar.propTypes = propTypes;\n\nexport default Sidebar;\n","class Fiber {\n  /**\n   * Finds the nearest component to the click target.\n   * @param {DOMNode} node - The origin node.\n   * @returns {string|null} - The key of the nearest component. Null if not found.\n   */\n  static findNearest(node) {\n    if (node.dataset.terraSandboxRoot) {\n      return 'root';\n    }\n\n    let target = Fiber.fiberNode(node);\n\n    while (target && !Fiber.match(target.key)) {\n      target = target.return;\n    }\n\n    if (target) {\n      return Fiber.match(target.key);\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns true if the key matches a UUID regex.\n   * @param {string} string - The string to match.\n   * @returns {string|null} - A UUID. Null if no match is found.\n   */\n  static match(key) {\n    const match = `${key}`.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/);\n\n    if (match) {\n      return match[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the associated fiber node of the dom element.\n   * @param {DOMNode} node - The target node.\n   * @returns {FiberNode|null} - The react internal FiberNode instance.\n   */\n  static fiberNode(node) {\n    const keys = Object.keys(node);\n\n    if (keys.length === 0) {\n      return null;\n    }\n\n    return node[keys.find((key) => key.startsWith('__reactInternalInstance$'))] || null;\n  }\n}\n\nexport default Fiber;\n","import React from 'react';\n\nconst DispatchContext = React.createContext();\n\nexport default DispatchContext;\n","import React from 'react';\nimport plugins from '../../plugins/plugins';\n\nclass WorkspaceGenerator {\n  /**\n   * Generates a workspace.\n   * @param {Object} imports - The available dynamic imports that have been loaded onto the page.\n   * @param {Object} config - The workspace configuration.\n   * @returns {ReactComponent} - A generated react component.\n   */\n  static generate(imports, config) {\n    const { root } = config;\n\n    const components = Object.keys(root).map((key) => {\n      const { type, value } = root[key];\n\n      if (type === 'element') {\n        return WorkspaceGenerator.component(imports, root[key]);\n      }\n\n      return value;\n    });\n\n    return <>{components}</>;\n  }\n\n  /**\n   * Generates the component import reference.\n   * @param {Object} imports - The available dynamic imports that have been loaded onto the page.\n   * @param {Object} config - The component configuration.\n   * @returns {Object|undefined} - A reference to the import.\n   */\n  static import(imports, config) {\n    const { name } = config;\n\n    if (name === 'terra-sandbox:Placeholder') {\n      return imports[name];\n    }\n\n    const { importFrom, exportType } = plugins[name];\n\n    if (exportType === 'Default') {\n      return imports[importFrom].default;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Generates a component.\n   * @param {Object} imports - The available dynamic imports that have been loaded onto the page.\n   * @param {Object} config - The component configuration.\n   * @return {ReactComponent} - A generated react component.\n   */\n  static component(imports, config) {\n    const { id, value } = config;\n    const { props } = value;\n\n    const Component = WorkspaceGenerator.import(imports, value);\n    const properties = WorkspaceGenerator.properties(imports, props);\n\n    return <Component key={id} id={id} {...properties} />;\n  }\n\n  /**\n   * Generates a set of properties.\n   * @param {Object} properties - The component property configurations.\n   * @returns {Object} - A set of generated properties.\n   */\n  static properties(imports, properties) {\n    const props = {};\n\n    Object.keys(properties).forEach((property) => {\n      const value = WorkspaceGenerator.property(imports, properties[property]);\n\n      if (value !== undefined && value !== null) {\n        props[property] = value;\n      }\n    });\n\n    return props;\n  }\n\n  /**\n   * Generates a property.\n   * @param {Object} property - The property to generate.\n   * @returns {Object} - A generated property;\n   */\n  static property(imports, property) {\n    const { type, value } = property;\n\n    if (value === undefined) {\n      return undefined;\n    }\n\n    if (type === 'node') {\n      return Object.keys(value).map((node) => WorkspaceGenerator.component(imports, value[node]));\n    }\n\n    if (type === 'element') {\n      return WorkspaceGenerator.component(imports, property);\n    }\n\n    return value;\n  }\n}\n\nexport default WorkspaceGenerator;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Fiber from '../../react-fiber/react-fiber';\nimport DispatchContext from '../../context/DispatchContext';\nimport WorkspaceGenerator from '../../generators/workspace/workspace-generator';\nimport styles from './Canvas.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The in-progress workspace design.\n   */\n  workspace: PropTypes.object.isRequired,\n  /**\n   * The available dynamic imports that have been loaded onto the page.\n   */\n  imports: PropTypes.object.isRequired,\n};\n\nconst Canvas = (props) => {\n  const { imports, workspace } = props;\n\n  const dispatch = useContext(DispatchContext);\n\n  /**\n   * Selects the nearest component from the origin of the click event.\n   * @param {Event} event - The click event.\n   */\n  function selectNearestTarget(event) {\n    const id = Fiber.findNearest(event.target);\n\n    if (id) {\n      dispatch({ id, type: 'select' });\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('click', selectNearestTarget);\n\n    return () => {\n      window.removeEventListener('click', selectNearestTarget);\n    };\n  });\n\n  return (\n    <div className={cx('canvas')}>\n      <div className={cx('body')} data-terra-sandbox-root>\n        {WorkspaceGenerator.generate(imports, workspace)}\n      </div>\n    </div>\n  );\n};\n\nCanvas.propTypes = propTypes;\n\nexport default Canvas;\n","export default {\n  'terra-button': () => import('terra-button'),\n  'terra-card': () => import('terra-card'),\n  'terra-content-container': () => import('terra-content-container'),\n  'terra-list': () => import('terra-list'),\n  'terra-overlay': () => import('terra-overlay'),\n};\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport DispatchContext from '../../context/DispatchContext';\nimport plugins from '../../plugins/plugins';\nimport imports from '../../plugins/imports';\nimport styles from './Placeholder.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The placeholder identifier.\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Whether or not the placeholder should expand to fill the available space.\n   */\n  expand: PropTypes.bool,\n};\n\nconst Placeholder = (props) => {\n  const { id, expand } = props;\n  const [dropped, setDropped] = useState('Drop Zone');\n\n  const dispatch = useContext(DispatchContext);\n\n  /**\n   * Handles the drag over event.\n   * @param {Event} event - The drag over event.\n   */\n  const handleDragover = (event) => {\n    event.preventDefault();\n  };\n\n  /**\n   * Handles the drag enter event.\n   * @param {Event} event - The drag enter event.\n   */\n  const handleDragenter = (event) => {\n    event.preventDefault();\n  };\n\n  /**\n   * Handles the drop event.\n   * @param {Event} event - The drop event.\n   */\n  const handleDrop = (event) => {\n    const sandboxData = event.dataTransfer.getData('terra-sandbox-data');\n\n    if (sandboxData) {\n      const { identifier } = JSON.parse(sandboxData);\n      const { importFrom } = plugins[identifier];\n\n      imports[importFrom]().then((dynamicImport) => {\n        const replacement = { name: identifier, type: 'element' };\n\n        dispatch({ id, dynamicImport, replacement, type: 'replace' });\n      }).catch((error) => {\n        // eslint-disable-next-line no-console\n        console.log(error);\n        setDropped('Whoops, something went wrong');\n      });\n    }\n  };\n\n  return (\n    <div\n      id={id}\n      className={cx('placeholder', { expand })}\n      onDragOver={handleDragover}\n      onDragEnter={handleDragenter}\n      onDrop={handleDrop}\n    >\n      {dropped}\n    </div>\n  );\n};\n\nPlaceholder.propTypes = propTypes;\n\nexport default Placeholder;\n","import uuidv4 from 'uuid/v4';\nimport Placeholder from '../../components/placeholder/Placeholder';\n\nconst initialUUID = uuidv4();\n\nconst initialState = {\n  imports: {\n    'terra-sandbox:Placeholder': Placeholder,\n  },\n  selected: undefined,\n  workspace: {\n    root: {\n      [initialUUID]: {\n        id: initialUUID,\n        parent: 'root',\n        type: 'element',\n        value: {\n          name: 'terra-sandbox:Placeholder',\n          props: {\n            expand: {\n              type: 'bool',\n              value: true,\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport default initialState;\n","class TreeParser {\n  /**\n   * Replaces a target within the tree.\n   * @param {Object} root - The root of the tree.\n   * @param {string} target - The target identifier.\n   * @param {Object} replacement - The replacement node.\n   */\n  static replace(root, target, replacement) {\n    const tree = {};\n\n    Object.keys(root).forEach((node) => {\n      tree[node] = TreeParser.replaceTarget(root[node], target, replacement);\n    });\n\n    return { root: tree };\n  }\n\n  /**\n   * Replaces a target node within a tree.\n   * @param {Object} node - The current node.\n   * @param {string} target - The target identifier.\n   * @param {Object} replacement - The replacement node.\n   */\n  static replaceTarget(node, target, replacement) {\n    const { id, parent, type } = node;\n\n    if (id === target) {\n      return { ...replacement, parent };\n    }\n\n    if (type === 'element') {\n      return TreeParser.replaceElement(node, target, replacement);\n    }\n\n    if (type === 'node') {\n      return TreeParser.replaceNode(node, target, replacement);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replaces an element node within a tree.\n   * @param {Object} node - The element node.\n   * @param {string} target - The target identifier.\n   * @param {Object} replacement - The replacement node.\n   */\n  static replaceElement(node, target, replacement) {\n    const { id, parent, type, value } = node;\n    const { name, props } = value;\n\n    const properties = {};\n\n    Object.keys(props).forEach((prop) => {\n      properties[prop] = TreeParser.replaceTarget(props[prop], target, replacement);\n    });\n\n    return { id, parent, type, value: { name, props: properties } };\n  }\n\n  /**\n   * Replaces a node node within a tree.\n   * @param {Object} node - The element node.\n   * @param {string} target - The target identifier.\n   * @param {Object} replacement - The replacement node.\n   */\n  static replaceNode(node, target, replacement) {\n    const { id, parent, type, value } = node;\n\n    const nodes = {};\n\n    Object.keys(value).forEach((key) => {\n      nodes[key] = TreeParser.replaceTarget(value[key], target, replacement);\n    });\n\n    return { id, parent, type, value: nodes };\n  }\n}\n\nexport default TreeParser;\n","import uuidv4 from 'uuid/v4';\nimport plugins from '../../plugins/plugins';\n\nclass ExampleGenerator {\n  /**\n   * Generates an example.\n   * @param {Object} config - The example configuration.\n   * @returns {Object} - A generated example.\n   */\n  static generate(config) {\n    const { type, parent } = config;\n\n    const id = uuidv4();\n\n    if (type === 'element') {\n      return { id, parent, type, value: ExampleGenerator.component(id, config) };\n    }\n\n    return { id, parent, type, value: undefined };\n  }\n\n  /**\n   * Generates an example component.\n   * @param {string} id - The example identifier.\n   * @param {Object} config - The example configuration.\n   */\n  static component(id, config) {\n    const { name } = config;\n    const { props } = ExampleGenerator.configuration(name);\n\n    const properties = ExampleGenerator.properties(id, props);\n\n    return { name, props: properties };\n  }\n\n  /**\n   * Fetches the component configuration object.\n   * @param {string} name - The component name.\n   * @returns {Object} - The component configuration.\n   */\n  static configuration(name) {\n    if (name === 'terra-sandbox:Placeholder') {\n      return { props: { expand: { type: 'bool' } } };\n    }\n\n    return plugins[name];\n  }\n\n  /**\n   * Generates example component properties.\n   * @param {string} id - The component identifier.\n   * @param {Object} properties - The component property configurations.\n   * @returns {Object} - The component properties.\n   */\n  static properties(id, properties) {\n    const props = {};\n\n    Object.keys(properties).forEach((property) => {\n      props[property] = ExampleGenerator.property({ id, property: properties[property] });\n    });\n\n    return props;\n  }\n\n  /**\n   * Generates an example property.\n   * @param {Object} config - The property configuration.\n   * @returns {Object} - A generated property.\n   */\n  static property(config) {\n    const { id, property } = config;\n    const { type } = property;\n\n    if (type === 'element') {\n      return ExampleGenerator.placeholder(id);\n    }\n\n    if (type === 'node') {\n      const example = ExampleGenerator.placeholder(id);\n\n      return { type, value: { [example.id]: example } };\n    }\n\n    return { type, value: undefined };\n  }\n\n  /**\n   * Creates a placeholder.\n   * @param {string} parent - The parent identifier.\n   */\n  static placeholder(parent) {\n    return ExampleGenerator.generate({ name: 'terra-sandbox:Placeholder', type: 'element', parent });\n  }\n}\n\nexport default ExampleGenerator;\n","import plugins from '../../plugins/plugins';\nimport TreeParser from '../../tree-parser/tree-parser';\nimport ExampleGenerator from '../../generators/example/example-generator';\n\n/**\n * Replaces a component with another component.\n * @param {Object} state - The current application state.\n * @param {Object} action - The dispatched action.\n */\nconst replace = (state, action) => {\n  const { imports, workspace } = state;\n  const { root } = workspace;\n  const { id, replacement, dynamicImport } = action;\n\n  // Preserve the existing ID for replacements.\n  const component = ExampleGenerator.generate(replacement);\n  const tree = TreeParser.replace(root, id, component);\n\n  // Replace actions may optionally introduce a new dynamic import.\n  if (dynamicImport) {\n    const { name } = replacement;\n    const { importFrom } = plugins[name];\n\n    imports[importFrom] = dynamicImport;\n  }\n\n  return { ...state, imports, workspace: tree };\n};\n\nexport default replace;\n","/**\n * Selects a component.\n * @param {Object} state - The current application state.\n * @param {Object} action - The dispatched action.\n */\nconst select = (state, action) => {\n  const { id } = action;\n\n  return { ...state, selected: id };\n};\n\nexport default select;\n","import initialState from './initial-state/initialState';\nimport replace from './replace/replace';\nimport select from './select/select';\n\nconst reducer = (state, action) => {\n  const { type } = action;\n\n  switch (type) {\n    case 'replace':\n      return replace(state, action);\n    case 'select':\n      return select(state, action);\n    default:\n      // eslint-disable-next-line no-console\n      console.log('WARNING: No reducer action was specified.');\n      return state;\n  }\n};\n\nexport default reducer;\nexport { initialState };\n","import React, { useReducer } from 'react';\nimport Base from 'terra-base';\nimport classNames from 'classnames/bind';\nimport Editor from '../editor/Editor';\nimport Sidebar from '../sidebar/Sidebar';\nimport Canvas from '../canvas/Canvas';\nimport DispatchContext from '../../context/DispatchContext';\nimport reducer, { initialState } from '../../reducer/reducer';\n\nimport styles from './Sandbox.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst Sandbox = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { imports, selected, workspace } = state;\n\n  return (\n    <Base locale=\"en\">\n      <div className={cx('sandbox')}>\n        <div className={cx('header')}>\n          Header\n        </div>\n        <div className={cx('layout')}>\n          <DispatchContext.Provider value={dispatch}>\n            <Sidebar selected={selected} workspace={workspace} />\n            <Canvas imports={imports} workspace={workspace} />\n            <Editor selected={selected} workspace={workspace} />\n          </DispatchContext.Provider>\n        </div>\n      </div>\n    </Base>\n  );\n};\n\nexport default Sandbox;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Sandbox from './components/sandbox/Sandbox';\n\nReactDOM.render(<Sandbox />, document.getElementById('root'));\n"],"sourceRoot":""}